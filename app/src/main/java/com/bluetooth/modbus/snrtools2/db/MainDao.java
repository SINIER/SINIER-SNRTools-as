package com.bluetooth.modbus.snrtools2.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Main".
*/
public class MainDao extends AbstractDao<Main, Long> {

    public static final String TABLENAME = "Main";

    /**
     * Properties of entity Main.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "type");
        public final static Property FontSize = new Property(2, String.class, "fontSize", false, "fontSize");
        public final static Property Gravity = new Property(3, String.class, "gravity", false, "gravity");
        public final static Property Count = new Property(4, String.class, "count", false, "count");
        public final static Property X = new Property(5, String.class, "x", false, "x");
        public final static Property Y = new Property(6, String.class, "y", false, "y");
        public final static Property Width = new Property(7, String.class, "width", false, "width");
        public final static Property Height = new Property(8, String.class, "height", false, "height");
        public final static Property HexNo = new Property(9, String.class, "hexNo", false, "hexNo");
        public final static Property Value = new Property(10, String.class, "value", false, "value");
    }


    public MainDao(DaoConfig config) {
        super(config);
    }
    
    public MainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Main\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"type\" TEXT," + // 1: type
                "\"fontSize\" TEXT," + // 2: fontSize
                "\"gravity\" TEXT," + // 3: gravity
                "\"count\" TEXT," + // 4: count
                "\"x\" TEXT," + // 5: x
                "\"y\" TEXT," + // 6: y
                "\"width\" TEXT," + // 7: width
                "\"height\" TEXT," + // 8: height
                "\"hexNo\" TEXT," + // 9: hexNo
                "\"value\" TEXT);"); // 10: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Main\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Main entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String fontSize = entity.getFontSize();
        if (fontSize != null) {
            stmt.bindString(3, fontSize);
        }
 
        String gravity = entity.getGravity();
        if (gravity != null) {
            stmt.bindString(4, gravity);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(5, count);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(6, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(7, y);
        }
 
        String width = entity.getWidth();
        if (width != null) {
            stmt.bindString(8, width);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(9, height);
        }
 
        String hexNo = entity.getHexNo();
        if (hexNo != null) {
            stmt.bindString(10, hexNo);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(11, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Main entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String fontSize = entity.getFontSize();
        if (fontSize != null) {
            stmt.bindString(3, fontSize);
        }
 
        String gravity = entity.getGravity();
        if (gravity != null) {
            stmt.bindString(4, gravity);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(5, count);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(6, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(7, y);
        }
 
        String width = entity.getWidth();
        if (width != null) {
            stmt.bindString(8, width);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(9, height);
        }
 
        String hexNo = entity.getHexNo();
        if (hexNo != null) {
            stmt.bindString(10, hexNo);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(11, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Main readEntity(Cursor cursor, int offset) {
        Main entity = new Main( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fontSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gravity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // count
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // x
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // y
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // width
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // height
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hexNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Main entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFontSize(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGravity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setX(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setY(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWidth(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeight(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHexNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setValue(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Main entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Main entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Main entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
