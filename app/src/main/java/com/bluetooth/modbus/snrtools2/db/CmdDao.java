package com.bluetooth.modbus.snrtools2.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Cmd".
*/
public class CmdDao extends AbstractDao<Cmd, String> {

    public static final String TABLENAME = "Cmd";

    /**
     * Properties of entity Cmd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HexNo = new Property(0, String.class, "hexNo", true, "hexNo");
        public final static Property CmdName = new Property(1, String.class, "cmdName", false, "cmdName");
        public final static Property Ext = new Property(2, String.class, "ext", false, "ext");
        public final static Property CmdPwd = new Property(3, String.class, "cmdPwd", false, "cmdPwd");
    }


    public CmdDao(DaoConfig config) {
        super(config);
    }
    
    public CmdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Cmd\" (" + //
                "\"hexNo\" TEXT PRIMARY KEY NOT NULL ," + // 0: hexNo
                "\"cmdName\" TEXT," + // 1: cmdName
                "\"ext\" TEXT," + // 2: ext
                "\"cmdPwd\" TEXT);"); // 3: cmdPwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Cmd\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cmd entity) {
        stmt.clearBindings();
 
        String hexNo = entity.getHexNo();
        if (hexNo != null) {
            stmt.bindString(1, hexNo);
        }
 
        String cmdName = entity.getCmdName();
        if (cmdName != null) {
            stmt.bindString(2, cmdName);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(3, ext);
        }
 
        String cmdPwd = entity.getCmdPwd();
        if (cmdPwd != null) {
            stmt.bindString(4, cmdPwd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cmd entity) {
        stmt.clearBindings();
 
        String hexNo = entity.getHexNo();
        if (hexNo != null) {
            stmt.bindString(1, hexNo);
        }
 
        String cmdName = entity.getCmdName();
        if (cmdName != null) {
            stmt.bindString(2, cmdName);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(3, ext);
        }
 
        String cmdPwd = entity.getCmdPwd();
        if (cmdPwd != null) {
            stmt.bindString(4, cmdPwd);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Cmd readEntity(Cursor cursor, int offset) {
        Cmd entity = new Cmd( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // hexNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cmdName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ext
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // cmdPwd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cmd entity, int offset) {
        entity.setHexNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCmdName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCmdPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Cmd entity, long rowId) {
        return entity.getHexNo();
    }
    
    @Override
    public String getKey(Cmd entity) {
        if(entity != null) {
            return entity.getHexNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cmd entity) {
        return entity.getHexNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
