package com.bluetooth.modbus.snrtools2.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Var".
*/
public class VarDao extends AbstractDao<Var, String> {

    public static final String TABLENAME = "Var";

    /**
     * Properties of entity Var.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HexNo = new Property(0, String.class, "hexNo", true, "hexNo");
        public final static Property Type = new Property(1, String.class, "type", false, "type");
        public final static Property Count = new Property(2, String.class, "count", false, "count");
        public final static Property Unit = new Property(3, String.class, "unit", false, "unit");
    }


    public VarDao(DaoConfig config) {
        super(config);
    }
    
    public VarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Var\" (" + //
                "\"hexNo\" TEXT PRIMARY KEY NOT NULL ," + // 0: hexNo
                "\"type\" TEXT," + // 1: type
                "\"count\" TEXT," + // 2: count
                "\"unit\" TEXT);"); // 3: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Var\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Var entity) {
        stmt.clearBindings();
 
        String hexNo = entity.getHexNo();
        if (hexNo != null) {
            stmt.bindString(1, hexNo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(3, count);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(4, unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Var entity) {
        stmt.clearBindings();
 
        String hexNo = entity.getHexNo();
        if (hexNo != null) {
            stmt.bindString(1, hexNo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(3, count);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(4, unit);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Var readEntity(Cursor cursor, int offset) {
        Var entity = new Var( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // hexNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Var entity, int offset) {
        entity.setHexNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Var entity, long rowId) {
        return entity.getHexNo();
    }
    
    @Override
    public String getKey(Var entity) {
        if(entity != null) {
            return entity.getHexNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Var entity) {
        return entity.getHexNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
